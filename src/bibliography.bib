@misc{proteomes_homo_sapiens,
    title = {Proteomes · Homo sapiens},
    howpublished = {\url{https://www.uniprot.org/proteomes/UP000005640}},
    note = {Geraadpleegd: 5 oktober 2023}
}

@misc{proteomes_infuenza_b,
    title = {Proteomes · Influenza B virus (B/Bangkok/141/1994)},
    howpublished = {\url{https://www.uniprot.org/proteomes/UP000119054}},
    note = {Geraadpleegd: 5 oktober 2023}
}

@misc{proteomes_human_papillomavirus,
    title = {Proteomes · Human papillomavirus},
    howpublished = {\url{https://uniprot.org/proteomes/UP000126093}},
    note = {Geraadpleegd: 5 oktober 2023}
}

@phdthesis{phdPieterUnipept,
    abstract     = {{Metaproteogenomics is een onderzoeksdiscipline die de laatste jaren meer en meer naar de voorgrond treedt. Binnen deze discipline zullen onderzoekers typisch eerst een metagenomics onderzoek uitvoeren waarbij men het DNA van een groep organismen gaat onderzoeken en men wil bepalen welke organismen er precies aanwezig zijn in een ecosysteem. In een volgende stap, gaat men deze taxonomische informatie gebruiken om een metaproteomics onderzoek te verfijnen om zowel de taxonomische als functionele resolutie van een dergelijke analyse te verhogen. In mijn PhD-thesis beschrijf ik hoe ik de Unipept Desktop applicatie heb ontwikkeld en hoe deze tegemoet komt aan de noden van onderzoekers binnen het “metaproteogenomics”-veld. Unipept is een ecosysteem van tools dat initieel ontwikkeld werd voor de analyse van eiwitstalen (metaproteomics). Naast ondersteuning voor de analyse van metaproteogenomics-stalen, zorgt de nieuwe Unipept Desktop app er ook voor dat grotere eiwitstalen verwerkt kunnen worden, dat deze zowel met elkaar vergeleken als met zichzelf vergeleken kunnen worden en dat gevoelige medische data niet langer over het internet verstuurd moet worden. Ik beschrijf een aantal innovatieve technieken die het mogelijk maken om zoveel mogelijk programmacode te delen tussen de bestaande Unipept-tools en de nieuwe desktop app, hoe ik ervoor gezorgd heb dat deze een grote hoeveelheid data efficiënt lokaal kan verwerken en bevragen en welke implicaties dat heeft op de metaproteomics-onderzoeksdiscipline in de toekomst.}},
    author       = {{Verschaffelt, Pieter}},
    language     = {{eng}},
    pages        = {{XXXVI, 158}},
    publisher    = {{Ghent University. Faculty of Sciences}},
    school       = {{Ghent University}},
    title        = {{Building the Unipept Ecosystem : empowering high-throughput metaproteomics data analysis for characterizing complex microbial communities}},
    year         = {2023},
}

@article{SIHUMI_first_introduction,
    author = {Jannike Lea Krause and Stephanie Serena Schaepe and Katarina Fritz-Wallace and Beatrice Engelmann and Ulrike Rolle-Kampczyk and Sabine Kleinsteuber and Florian Schattenberg and Zishu Liu and Susann Mueller and Nico Jehmlich and Martin Von Bergen and Gunda Herberth},
    title = {Following the community development of SIHUMIx – a new intestinal in vitro model for bioreactor use},
    journal = {Gut Microbes},
    volume = {11},
    number = {4},
    pages = {1116-1129},
    year = {2020},
    publisher = {Taylor & Francis},
    doi = {10.1080/19490976.2019.1702431},
    note = {PMID: 31918607},
    URL = {https://doi.org/10.1080/19490976.2019.1702431},
    eprint = {https://doi.org/10.1080/19490976.2019.1702431}
}


@article{SIHUMI_frequently_used,
    doi = {10.1038/s41467-021-27542-8},
    url = {https://doi.org/10.1038/s41467-021-27542-8},
    year = {2021},
    month = dec,
    publisher = {Springer Science and Business Media {LLC}},
    volume = {12},
    number = {1},
    author = {Tim Van Den Bossche and Benoit J. Kunath and Kay Schallert and Stephanie S. Sch\"{a}pe and Paul E. Abraham and Jean Armengaud and Magnus {\O}. Arntzen and Ariane Bassignani and Dirk Benndorf and Stephan Fuchs and Richard J. Giannone and Timothy J. Griffin and Live H. Hagen and Rashi Halder and C{\'{e}}line Henry and Robert L. Hettich and Robert Heyer and Pratik Jagtap and Nico Jehmlich and Marlene Jensen and Catherine Juste and Manuel Kleiner and Olivier Langella and Theresa Lehmann and Emma Leith and Patrick May and Bart Mesuere and Guylaine Miotello and Samantha L. Peters and Olivier Pible and Pedro T. Queiros and Udo Reichl and Bernhard Y. Renard and Henning Schiebenhoefer and Alexander Sczyrba and Alessandro Tanca and Kathrin Trappe and Jean-Pierre Trezzi and Sergio Uzzau and Pieter Verschaffelt and Martin von Bergen and Paul Wilmes and Maximilian Wolf and Lennart Martens and Thilo Muth},
    title = {Critical Assessment of {MetaProteome} Investigation ({CAMPI}): a multi-laboratory comparison of established workflows},
    journal = {Nature Communications}
}

@misc{rustPerformantie,
    howpublished = {\url{https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust.html}},
    title = {The Computer Language 23.03 Benchmarks Game},
    author = {Isaac Gouy},
    note = {Geraadpleegd: 8 november 2023}
}

@article{UMGAP_paper,
    doi = {10.1186/s12864-022-08542-4},
    url = {https://doi.org/10.1186/s12864-022-08542-4},
    year = {2022},
    month = jun,
    publisher = {Springer Science and Business Media {LLC}},
    volume = {23},
    number = {1},
    author = {Felix Van der Jeugt and Rien Maertens and Aranka Steyaert and Pieter Verschaffelt and Caroline De Tender and Peter Dawyndt and Bart Mesuere},
    title = {{UMGAP}: the Unipept {MetaGenomics} Analysis Pipeline},
    journal = {{BMC} Genomics}
}

@misc{UMGAP_source,
    howpublished = {\url{https://github.com/unipept/umgap}},
    title = {Github UMGAP},
}

@article{Ukkonen1995,
    doi = {10.1007/bf01206331},
    url = {https://doi.org/10.1007/bf01206331},
    year = {1995},
    month = sep,
    publisher = {Springer Science and Business Media {LLC}},
    volume = {14},
    number = {3},
    pages = {249--260},
    author = {E. Ukkonen},
    title = {On-line construction of suffix trees},
    journal = {Algorithmica},
    note = {Vrij leesbaar op: \url{https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf}},
}

@book{Gusfield1997,
    doi = {10.1017/cbo9780511574931},
    url = {https://doi.org/10.1017/cbo9780511574931},
    year = {1997},
    month = may,
    publisher = {Cambridge University Press},
    author = {Dan Gusfield},
    title = {Algorithms on Strings, Trees and Sequences}
}

@misc{AD3_ukkonen,
    author = {Gunnar Brinkmann},
    title = {Algoritmen en datastructuren 3, 2021},
    date = {2021},
    month = jul,
    day = {5},
    howpublished = {\url{https://twicaagt.ugent.be/~gbrinkma/DA3_2021/lesnotas_AD3_2021.pdf}},
    pages    = "48--63",
}

@book{the_rust_book,
    author = {Klabnik, Steve and Nichols, Carol},
    title = {The Rust Programming Language, 2nd Edition},
    year = {2022},
    isbn = {9781718503106},
    publisher = {No Starch Press},
    address = {USA},
    abstract = {The Rust Programming Language is the official book on Rust, an open-source, community-developed systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. This is the undisputed go-to guide to Rust, written by two members of the Rust core team, with feedback and contributions from 42 members of the community. The book assumes that youve written code in another programming language but makes no assumptions about which one, meaning the material is accessible and useful to developers from a wide variety of programming backgrounds. Known by the Rust community as The Book, The Rust Programming Language includes concept chapters, where youll learn about a particular aspect of Rust, and project chapters, where youll apply what youve learned so far to build small programs. The Book opens with a quick hands-on project to introduce the basics then explores key concepts in depth, such as ownership, the type system, error handling, and fearless concurrency. Next come detailed explanations of Rust-oriented perspectives on topics like pattern matching, iterators, and smart pointers, with concrete examples and exercises--taking you from theory to practice. The Rust Programming Language will also show you how to:- Grasp important concepts unique to Rust, like ownership, borrowing, and lifetimes- Use Cargo, Rusts built-in package manager, to build and maintain your code, including downloading and building dependencies- Effectively use Rusts zero-cost abstractions and employ your own Youll learn to develop reliable code thats speed and memory efficient, while avoiding the infamous and arcane programming pitfalls common at the systems level. When you need to dive down into lower-level control, this guide will show you how without taking on the customary risk of crashes or security holes and without requiring you to learn the fine points of a fickle toolchain. Youll also learn how to create command line programs, build single- and multithreaded web servers, and much more. The Rust Programming Language fully embraces Rusts potential to empower its users. This friendly and approachable guide will help you build not only your knowledge of Rust but also your ability to program with confidence in a wider variety of domains.},
    note = {Online gelezen op: \url{https://doc.rust-lang.org/stable/book/}},
}

@misc{rustlings,
    title = {Rustlings},
    howpublished = {\url{https://github.com/rust-lang/rustlings}},
    note = {Geraadpleegd: 24 oktober 2023}
}

@misc{rust_difficulty_quote,
    title = {A Tree Structure implemented in Rust.},
    howpublished = {\url{https://applied-math-coding.medium.com/a-tree-structure-implemented-in-rust-8344783abd75}},
    publisher = {Medium}
}

@misc{interior_mutability,
    title = {RefCell<T> and the Interior Mutability Pattern},
    howpublished = {\url{https://doc.rust-lang.org/book/ch15-05-interior-mutability.html\#refcellt-and-the-interior-mutability-pattern}}
}

@misc{rust_arena_trees,
    title = {No More Tears, No More Knots: Arena-Allocated Trees in Rust},
    howpublished = {\url{https://dev.to/deciduously/no-more-tears-no-more-knots-arena-allocated-trees-in-rust-44k6}},
    author = {Ben Lovy},
    year = {2019},
    month = dec,
    day = {19},
    publisher = {dev.to},
}

@misc{null_mistake,
    title = {Null References: The Billion Dollar Mistake},
    howpublished = {\url{https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/}},
    author = {Tony Hoare},
    year = {2009},
    month = aug,
    day = {25},
}

@article{NCBI_original_article,
    doi = {10.1093/nar/gkr1178},
    url = {https://doi.org/10.1093/nar/gkr1178},
    year = {2011},
    month = dec,
    publisher = {Oxford University Press ({OUP})},
    volume = {40},
    number = {D1},
    pages = {D136--D143},
    author = {S. Federhen},
    title = {The {NCBI} Taxonomy database},
    journal = {Nucleic Acids Research}
}

@article{NCBI_update,
    doi = {10.1093/database/baaa062},
    url = {https://doi.org/10.1093/database/baaa062},
    year = {2020},
    month = jan,
    publisher = {Oxford University Press ({OUP})},
    volume = {2020},
    author = {Conrad L Schoch and Stacy Ciufo and Mikhail Domrachev and Carol L Hotton and Sivakumar Kannan and Rogneda Khovanskaya and Detlef Leipe and Richard Mcveigh and Kathleen O'Neill and Barbara Robbertse and Shobha Sharma and Vladimir Soussov and John P Sullivan and Lu Sun and Se{\'{a}}n Turner and Ilene Karsch-Mizrachi},
    title = {{NCBI} Taxonomy: a comprehensive update on curation,  resources and tools},
    journal = {Database}
}

@misc{unipept_infrastructure,
    howpublished = {\url{https://github.com/unipept/unipept/wiki\#infrastructure}},
    title = {Unipept Infrastructure Wiki},
    author = {Pieter Verschaffelt},
    note = {Geraadpleegd: 10 november 2023}
}

@article{UniprotKB,
    author = {The UniProt Consortium },
    title = "{UniProt: the Universal Protein Knowledgebase in 2023}",
    journal = {Nucleic Acids Research},
    volume = {51},
    number = {D1},
    pages = {D523-D531},
    year = {2022},
    month = {11},
    issn = {0305-1048},
    doi = {10.1093/nar/gkac1052},
    url = {https://doi.org/10.1093/nar/gkac1052},
    eprint = {https://academic.oup.com/nar/article-pdf/51/D1/D523/48441158/gkac1052.pdf},
}

@misc{CCB_course,
    author = {Peter Dawyndt and Jan Fostier},
    title = {Computational Challenges in Bioinformatics [Lecture notes, Ghent University]},
    year = {2022},
    institution = {Ghent University}
}

@misc{Ukkonen_CCB,
    author = {Jan Fostier},
    title = {Ukkonen in C++},
    howpublished = {\url{https://github.ugent.be/jfostier/CCB/tree/master/suffixtree}},
    note = {Geraadpleegd: 10 oktober 2023},
}

@article{unipept_desktop_2,
    title = {Unipept Desktop 2.0: Construction of Targeted Reference Protein Databases for Metaproteogenomics Analyses},
    volume = {22},
    ISSN = {1535-3907},
    url = {http://dx.doi.org/10.1021/acs.jproteome.3c00091},
    DOI = {10.1021/acs.jproteome.3c00091},
    number = {8},
    journal = {Journal of Proteome Research},
    publisher = {American Chemical Society (ACS)},
    author = {Verschaffelt,  Pieter and Tanca,  Alessandro and Abbondio,  Marcello and Van Den Bossche,  Tim and Moortele,  Tibo Vande and Dawyndt,  Peter and Martens,  Lennart and Mesuere,  Bart},
    year = {2023},
    month = jul,
    pages = {2620–2628}
}

@article{unipept_desktop,
    title = {Unipept Desktop: A Faster,  More Powerful Metaproteomics Results Analysis Tool},
    volume = {20},
    ISSN = {1535-3907},
    url = {http://dx.doi.org/10.1021/acs.jproteome.0c00855},
    DOI = {10.1021/acs.jproteome.0c00855},
    number = {4},
    journal = {Journal of Proteome Research},
    publisher = {American Chemical Society (ACS)},
    author = {Verschaffelt,  Pieter and Van Den Bossche,  Tim and Martens,  Lennart and Dawyndt,  Peter and Mesuere,  Bart},
    year = {2021},
    month = jan,
    pages = {2005–2009}
}

@article{unipept_cli,
    title = {Unipept CLI 2.0: adding support for visualizations and functional annotations},
    volume = {36},
    ISSN = {1367-4811},
    url = {http://dx.doi.org/10.1093/bioinformatics/btaa553},
    DOI = {10.1093/bioinformatics/btaa553},
    number = {14},
    journal = {Bioinformatics},
    publisher = {Oxford University Press (OUP)},
    author = {Verschaffelt,  Pieter and Van Thienen,  Philippe and Van Den Bossche,  Tim and Van der Jeugt,  Felix and De Tender,  Caroline and Martens,  Lennart and Dawyndt,  Peter and Mesuere,  Bart},
    editor = {Luigi Martelli,  Pier},
    year = {2020},
    month = jun,
    pages = {4220–4221}
}

@article{unipept_4,
    title = {Unipept 4.0: Functional Analysis of Metaproteome Data},
    volume = {18},
    ISSN = {1535-3907},
    url = {http://dx.doi.org/10.1021/acs.jproteome.8b00716},
    DOI = {10.1021/acs.jproteome.8b00716},
    number = {2},
    journal = {Journal of Proteome Research},
    publisher = {American Chemical Society (ACS)},
    author = {Gurdeep Singh,  Robbert and Tanca,  Alessandro and Palomba,  Antonio and Van der Jeugt,  Felix and Verschaffelt,  Pieter and Uzzau,  Sergio and Martens,  Lennart and Dawyndt,  Peter and Mesuere,  Bart},
    year = {2018},
    month = nov,
    pages = {606–615}
}

@article{unipept_tutorial,
    title = {High-throughput metaproteomics data analysis with Unipept: A tutorial},
    volume = {171},
    ISSN = {1874-3919},
    url = {http://dx.doi.org/10.1016/j.jprot.2017.05.022},
    DOI = {10.1016/j.jprot.2017.05.022},
    journal = {Journal of Proteomics},
    publisher = {Elsevier BV},
    author = {Mesuere,  Bart and Van der Jeugt,  Felix and Willems,  Toon and Naessens,  Tom and Devreese,  Bart and Martens,  Lennart and Dawyndt,  Peter},
    year = {2018},
    month = jan,
    pages = {11–22}
}

@article{unipept_api,
    title = {Unipept web services for metaproteomics analysis},
    volume = {32},
    ISSN = {1367-4803},
    url = {http://dx.doi.org/10.1093/bioinformatics/btw039},
    DOI = {10.1093/bioinformatics/btw039},
    number = {11},
    journal = {Bioinformatics},
    publisher = {Oxford University Press (OUP)},
    author = {Mesuere,  Bart and Willems,  Toon and Van der Jeugt,  Felix and Devreese,  Bart and Vandamme,  Peter and Dawyndt,  Peter},
    year = {2016},
    month = jan,
    pages = {1746–1748}
}

@article{unipept_web,
    title = {The Unipept metaproteomics analysis pipeline},
    volume = {15},
    ISSN = {1615-9861},
    url = {http://dx.doi.org/10.1002/pmic.201400361},
    DOI = {10.1002/pmic.201400361},
    number = {8},
    journal = {PROTEOMICS},
    publisher = {Wiley},
    author = {Mesuere,  Bart and Debyser,  Griet and Aerts,  Maarten and Devreese,  Bart and Vandamme,  Peter and Dawyndt,  Peter},
    year = {2015},
    month = feb,
    pages = {1437–1442}
}

@article{unipept_orig,
    title = {Unipept: Tryptic Peptide-Based Biodiversity Analysis of Metaproteome Samples},
    volume = {11},
    ISSN = {1535-3907},
    url = {http://dx.doi.org/10.1021/pr300576s},
    DOI = {10.1021/pr300576s},
    number = {12},
    journal = {Journal of Proteome Research},
    publisher = {American Chemical Society (ACS)},
    author = {Mesuere,  Bart and Devreese,  Bart and Debyser,  Griet and Aerts,  Maarten and Vandamme,  Peter and Dawyndt,  Peter},
    year = {2012},
    month = nov,
    pages = {5773–5780}
}

@article{patricia,
    author = {Morrison, Donald R.},
    title = {PATRICIA—Practical Algorithm To Retrieve Information Coded in Alphanumeric},
    year = {1968},
    issue_date = {Oct. 1968},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {15},
    number = {4},
    issn = {0004-5411},
    url = {https://doi.org/10.1145/321479.321481},
    doi = {10.1145/321479.321481},
    abstract = {PATRICIA is an algorithm which provides a flexible means of storing, indexing, and retrieving information in a large file, which is economical of index space and of reindexing time. It does not require rearrangement of text or index as new material is added. It requires a minimum restriction of format of text and of keys; it is extremely flexible in the variety of keys it will respond to. It retrieves information in response to keys furnished by the user with a quantity of computation which has a bound which depends linearly on the length of keys and the number of their proper occurrences and is otherwise independent of the size of the library. It has been implemented in several variations as FORTRAN programs for the CDC-3600, utilizing disk file storage of text. It has been applied to several large information-retrieval problems and will be applied to others.},
    journal = {J. ACM},
    month = {oct},
    pages = {514–534},
    numpages = {21}
}

@misc{reference_counting,
    title = {Rc<T>, the Reference Counted Smart Pointer},
    howpublished = {\url{https://doc.rust-lang.org/book/ch15-04-rc.html\#rct-the-reference-counted-smart-pointer}}
}

@misc{usize,
    title = {Rust documentation: usize},
    howpublished = {\url{https://doc.rust-lang.org/std/primitive.usize.html}}
}

@article{knuth-morris-pratt,
    author = {Knuth, Donald E. and Morris, Jr., James H. and Pratt, Vaughan R.},
    title = {Fast Pattern Matching in Strings},
    journal = {SIAM Journal on Computing},
    volume = {6},
    number = {2},
    pages = {323-350},
    year = {1977},
    doi = {10.1137/0206024},
    URL = {https://doi.org/10.1137/0206024},
    eprint = {https://doi.org/10.1137/0206024},
    abstract = { An algorithm is presented which finds all occurrences of one given string within another, in running time proportional to the sum of the lengths of the strings. The constant of proportionality is low enough to make this algorithm of practical use, and the procedure can also be extended to deal with some more general pattern-matching problems. A theoretical application of the algorithm shows that the set of concatenations of even palindromes, i.e., the language \$\{\alpha \alpha ^R\}^*\$, can be recognized in linear time. Other algorithms which run even faster on the average are also considered. }
}

@article{boyer-moore-horspool,
    author = {Horspool, R. Nigel},
    title = {Practical fast searching in strings},
    journal = {Software: Practice and Experience},
    volume = {10},
    number = {6},
    pages = {501-506},
    keywords = {String searching, Pattern matching, Text editing, Bibliographic search},
    doi = {https://doi.org/10.1002/spe.4380100608},
    url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608},
    eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.4380100608},
    abstract = {Abstract The problem of searching through text to find a specified substring is considered in a practical setting. It is discovered that a method developed by Boyer and Moore can outperform even special-purpose search instructions that may be built into the computer hardware. For very short substrings however, these special purpose instructions are fastest—provided that they are used in an optimal way.},
    year = {1980}
}

@article{shift-and,
    author = {Bálint Dömölki},
    title = {An algorithm for syntactical analysis},
    journal = {Computational Linguistics 3},
    year = {1964},
    institution = {Hungarian Academy of Science},
    pages = {29-46},
}

@INPROCEEDINGS{fm_index,
    author={Ferragina, P. and Manzini, G.},
    booktitle={Proceedings 41st Annual Symposium on Foundations of Computer Science},
    title={Opportunistic data structures with applications},
    year={2000},
    volume={},
    number={},
    pages={390-398},
    abstract={We address the issue of compressing and indexing data. We devise a data structure whose space occupancy is a function of the entropy of the underlying data set. We call the data structure opportunistic since its space occupancy is decreased when the input is compressible and this space reduction is achieved at no significant slowdown in the query performance. More precisely, its space occupancy is optimal in an information-content sense because text T[1,u] is stored using O(H/sub k/(T))+o(1) bits per input symbol in the worst case, where H/sub k/(T) is the kth order empirical entropy of T (the bound holds for any fixed k). Given an arbitrary string P[1,p], the opportunistic data structure allows to search for the occurrences of P in T in O(p+occlog/sup /spl epsiv//u) time (for any fixed /spl epsiv/>0). If data are uncompressible we achieve the best space bound currently known (Grossi and Vitter, 2000); on compressible data our solution improves the succinct suffix array of (Grossi and Vitter, 2000) and the classical suffix tree and suffix array data structures either in space or in query time or both. We also study our opportunistic data structure in a dynamic setting and devise a variant achieving effective search and update time bounds. Finally, we show how to plug our opportunistic data structure into the Glimpse tool (Manber and Wu, 1994). The result is an indexing tool which achieves sublinear space and sublinear query time complexity.},
    keywords={},
    doi={10.1109/SFCS.2000.892127},
    ISSN={0272-5428},
    month=nov
}

@article{mcCreight_first_suffixtree,
    author = {McCreight, Edward M.},
    title = {A Space-Economical Suffix Tree Construction Algorithm},
    year = {1976},
    issue_date = {April 1976},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {23},
    number = {2},
    issn = {0004-5411},
    url = {https://doi.org/10.1145/321941.321946},
    doi = {10.1145/321941.321946},
    abstract = {A new algorithm is presented for constructing auxiliary digital search trees to aid in exact-match substring searching. This algorithm has the same asymptotic running time bound as previously published algorithms, but is more economical in space. Some implementation considerations are discussed, and new work on the modification of these search trees in response to incremental changes in the strings they index (the update problem) is presented.},
    journal = {J. ACM},
    month = {apr},
    pages = {262–272},
    numpages = {11}
}

@inproceedings{suffix_array_first_mention,
    author = {Manber, Udi and Myers, Gene},
    title = {Suffix Arrays: A New Method for on-Line String Searches},
    year = {1990},
    isbn = {0898712513},
    publisher = {Society for Industrial and Applied Mathematics},
    address = {USA},
    booktitle = {Proceedings of the First Annual ACM-SIAM Symposium on Discrete Algorithms},
    pages = {319–327},
    numpages = {9},
    location = {San Francisco, California, USA},
    series = {SODA '90}
}

@INPROCEEDINGS{bi-directional_fm_index,
    author={Lam, T. W. and Li, Ruiqiang and Tam, Alan and Wong, Simon and Wu, Edward and Yiu, S. M.},
    booktitle={2009 IEEE International Conference on Bioinformatics and Biomedicine},
    title={High Throughput Short Read Alignment via Bi-directional BWT},
    year={2009},
    volume={},
    number={},
    pages={31-36},
    doi={10.1109/BIBM.2009.42}
}

@misc{libdivsufsort,
    author = {Yuta Mori},
    howpublished = {\url{https://github.com/y-256/libdivsufsort}},
    title = {Libdivsufsort},
    note = {Geraadpleegd: 22 november 2023}
}

@misc{dark_archon,
    author = {Kvark},
    howpublished = {\url{https://github.com/kvark/dark-archon}},
    title = {Archon},
    note = {Geraadpleegd: 22 november 2023}
}

@article{ko_alura,
    title = {Space efficient linear time construction of suffix arrays},
    journal = {Journal of Discrete Algorithms},
    volume = {3},
    number = {2},
    pages = {143-156},
    year = {2005},
    note = {Combinatorial Pattern Matching (CPM) Special Issue},
    issn = {1570-8667},
    doi = {https://doi.org/10.1016/j.jda.2004.08.002},
    url = {https://www.sciencedirect.com/science/article/pii/S1570866704000498},
    author = {Pang Ko and Srinivas Aluru},
    keywords = {Computational biology, Pattern matching, String algorithms, Suffix array, Suffix sorting},
    abstract = {We present a linear time algorithm to sort all the suffixes of a string over a large alphabet of integers. The sorted order of suffixes of a string is also called suffix array, a data structure introduced by Manber and Myers that has numerous applications in pattern matching, string processing, and computational biology. Though the suffix tree of a string can be constructed in linear time and the sorted order of suffixes derived from it, a direct algorithm for suffix sorting is of great interest due to the space requirements of suffix trees. Our result is one of the first linear time suffix array construction algorithms, which improve upon the previously known O(nlogn) time direct algorithms for suffix sorting. It can also be used to derive a different linear time construction algorithm for suffix trees. Apart from being simple and applicable for alphabets not necessarily of fixed size, this method of constructing suffix trees is more space efficient.}
}

@inproceedings{sais,
    author = {Nong, Ge and Zhang, Sen and Chan, Daricks Wai Hong},
    year = {2009},
    month = {03},
    pages = {193-202},
    title = {Linear Suffix Array Construction by Almost Pure Induced-Sorting},
    journal = {Proceedings of the Data Compression Conference},
    doi = {10.1109/DCC.2009.42}
}

@article{radixSA,
    title = {An elegant algorithm for the construction of suffix arrays},
    journal = {Journal of Discrete Algorithms},
    volume = {27},
    pages = {21-28},
    year = {2014},
    issn = {1570-8667},
    doi = {https://doi.org/10.1016/j.jda.2014.03.001},
    url = {https://www.sciencedirect.com/science/article/pii/S1570866714000173},
    author = {Sanguthevar Rajasekaran and Marius Nicolae},
    keywords = {Suffix array construction algorithm, Parallel algorithm, High probability bounds},
    abstract = {The suffix array is a data structure that finds numerous applications in string processing problems for both linguistic texts and biological data. It has been introduced as a memory efficient alternative for suffix trees. The suffix array consists of the sorted suffixes of a string. There are several linear time suffix array construction algorithms (SACAs) known in the literature. However, one of the fastest algorithms in practice has a worst case run time of O(n2). The problem of designing practically and theoretically efficient techniques remains open. In this paper we present an elegant algorithm for suffix array construction which takes linear time with high probability; the probability is on the space of all possible inputs. Our algorithm is one of the simplest of the known SACAs and it opens up a new dimension of suffix array construction that has not been explored until now. Our algorithm is easily parallelizable. We offer parallel implementations on various parallel models of computing. We prove a lemma on the ℓ-mers of a random string which might find independent applications. We also present another algorithm that utilizes the above algorithm. This algorithm is called RadixSA and has a worst case run time of O(nlogn). RadixSA introduces an idea that may find independent applications as a speedup technique for other SACAs. An empirical comparison of RadixSA with other algorithms on various datasets reveals that our algorithm is one of the fastest algorithms to date. The C++ source code is freely available at http://www.engr.uconn.edu/~man09004/radixSA.zip.}
}

@misc{mergeSort,
    author = {John Von Neumann},
    title = {First Draft of a Report on the EDVAC},
    year = {1945},
    howpublished = {\url{https://web.mit.edu/STS.035/www/PDFs/edvac.pdf}}
}

@misc{building_sparse_sa,
    title={Sparse Suffix Tree Construction in Optimal Time and Space},
    author={Paweł Gawrychowski and Tomasz Kociumaka},
    year={2016},
    eprint={1608.00865},
    archivePrefix={arXiv},
    primaryClass={cs.DS}
}

@inbook{building_compressed_sa,
    title={Breaking the $O(n)$-Barrier in the Construction of Compressed Suffix Arrays and Suffix Trees},
    ISBN={9781611977554},
    url={http://dx.doi.org/10.1137/1.9781611977554.ch187},
    DOI={10.1137/1.9781611977554.ch187},
    booktitle={Proceedings of the 2023 Annual ACM-SIAM Symposium on Discrete Algorithms (SODA)},
    publisher={Society for Industrial and Applied Mathematics},
    author={Kempa, Dominik and Kociumaka, Tomasz},
    year={2023},
    month=jan, pages={5122–5202} }